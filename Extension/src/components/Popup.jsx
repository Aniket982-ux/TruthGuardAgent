import React, { useState } from 'react';
import {
  Shield,
  Scan,
  CheckCircle2,
  XCircle,
  Loader2,
  MousePointerClick,
  Download,
} from 'lucide-react';

const Popup = () => {
  const [mode, setMode] = useState(null); // 'full' or 'selection'
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  const [scrapedData, setScrapedData] = useState(null);

  const handleFullPageScan = async () => {
    setLoading(true);
    setError(null);
    setResult(null);

    try {
      // Get current tab
      const [tab] = await chrome.tabs.query({
        active: true,
        currentWindow: true,
      });

      // Check if we can access the tab
      if (!tab || !tab.id) {
        throw new Error('Unable to access current tab');
      }

      // Send message to content script to scrape the page
      const response = await chrome.tabs
        .sendMessage(tab.id, {
          action: 'scrapePage',
        })
        .catch((err) => {
          console.error('Content script error:', err);
          throw new Error('Content script not ready. Try refreshing the page.');
        });

      if (response && response.success) {
        // Store scraped data for download
        setScrapedData(response.data);

        // Demo: Show "Send to check" message
        setTimeout(() => {
          // Simulate API call to localhost:5000/api/extension
          console.log('Would send to: http://localhost:5000/api/extension', {
            mode: 'full_page',
            text: response.data.text,
            url: response.data.url,
            title: response.data.title,
          });

          // Demo response from localhost:5000/api/agent
          setResult({
            verdict: 'true',
            message: 'This fact is true',
            confidence: 0.95,
            summary:
              'The information has been verified against multiple reliable sources.',
            timestamp: new Date().toISOString(),
          });
          setLoading(false);
        }, 1500);
      } else {
        throw new Error('Failed to receive response from content script');
      }
    } catch (err) {
      console.error('Error scanning page:', err);
      setError(err.message || 'Failed to scan the page. Please try again.');
      setLoading(false);
    }
  };

  const handleSelectionScan = async () => {
    setLoading(true);
    setError(null);
    setResult(null);

    try {
      // Get current tab
      const [tab] = await chrome.tabs.query({
        active: true,
        currentWindow: true,
      });

      // Check if we can access the tab
      if (!tab || !tab.id) {
        throw new Error('Unable to access current tab');
      }

      // Inject selection tool
      await chrome.scripting
        .executeScript({
          target: { tabId: tab.id },
          func: () => {
            // Enable selection mode
            window.postMessage({ type: 'TRUTHGUARD_ENABLE_SELECTION' }, '*');
          },
        })
        .catch((err) => {
          console.error('Script injection error:', err);
          throw new Error(
            'Cannot inject script on this page (system page or restricted site)'
          );
        });

      // Close popup to allow user to select
      window.close();
    } catch (err) {
      console.error('Error enabling selection mode:', err);
      setError(
        err.message || 'Failed to enable selection mode. Please try again.'
      );
      setLoading(false);
    }
  };

  const resetState = () => {
    setMode(null);
    setResult(null);
    setError(null);
    setLoading(false);
    setScrapedData(null);
  };

  const downloadMarkdown = () => {
    if (!scrapedData) return;

    // Create markdown content
    const markdown = `# TruthGuard Fact Check Report

## Article Information
- **Title:** ${scrapedData.title}
- **URL:** ${scrapedData.url}
- **Scanned at:** ${new Date(scrapedData.timestamp).toLocaleString()}

## Extracted Content

${scrapedData.text}

---

## Verification Result
${
  result
    ? `
- **Verdict:** ${
        result.verdict === 'true' ? '‚úÖ Verified True' : '‚ùå False Information'
      }
- **Confidence:** ${(result.confidence * 100).toFixed(0)}%
- **Message:** ${result.message}
- **Summary:** ${result.summary}
- **Analyzed at:** ${new Date(result.timestamp).toLocaleString()}
`
    : 'Analysis pending...'
}

---

*Generated by TruthGuard Extension*
`;

    // Create blob and download
    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `truthguard-report-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-gradient-to-br from-blue-50 to-indigo-50 min-h-full rounded-xl overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-4 shadow-lg">
        <div className="flex items-center gap-2 mb-1">
          <Shield className="w-6 h-6" />
          <h1 className="text-xl font-bold">TruthGuard</h1>
        </div>
        <p className="text-blue-100 text-sm">
          Verify facts & detect misinformation
        </p>
      </div>

      <div className="p-4">
        {!loading && !result && (
          <>
            {/* Main Actions */}
            <div className="space-y-3 mb-4">
              <button
                onClick={handleFullPageScan}
                className="w-full bg-white hover:bg-blue-50 text-gray-800 font-semibold py-4 px-4 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-3 border-2 border-blue-200 hover:border-blue-400"
              >
                <Scan className="w-5 h-5 text-blue-600" />
                <div className="text-left">
                  <div className="text-base">Scan Full Page</div>
                  <div className="text-xs text-gray-500 font-normal">
                    Analyze entire article
                  </div>
                </div>
              </button>

              <button
                onClick={handleSelectionScan}
                className="w-full bg-white hover:bg-indigo-50 text-gray-800 font-semibold py-4 px-4 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-3 border-2 border-indigo-200 hover:border-indigo-400"
              >
                <MousePointerClick className="w-5 h-5 text-indigo-600" />
                <div className="text-left">
                  <div className="text-base">Select Region</div>
                  <div className="text-xs text-gray-500 font-normal">
                    Choose specific area to verify
                  </div>
                </div>
              </button>
            </div>

            {/* Info Card */}
            <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
              <h3 className="font-semibold text-gray-700 mb-2 text-sm">
                How it works:
              </h3>
              <ul className="text-xs text-gray-600 space-y-1.5">
                <li className="flex items-start gap-2">
                  <span className="text-blue-600 mt-0.5">‚Ä¢</span>
                  <span>
                    Click "Scan Full Page" to analyze the entire article
                  </span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-indigo-600 mt-0.5">‚Ä¢</span>
                  <span>
                    Click "Select Region" to verify a specific section
                  </span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="text-green-600 mt-0.5">‚Ä¢</span>
                  <span>
                    Get instant fact-checking results with confidence scores
                  </span>
                </li>
              </ul>
            </div>
          </>
        )}

        {/* Loading State */}
        {loading && (
          <div className="bg-white rounded-lg p-8 shadow-lg text-center">
            <Loader2 className="w-12 h-12 text-blue-600 animate-spin mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-800 mb-2">
              Analyzing Content...
            </h3>
            <p className="text-sm text-gray-600 mb-4">
              Sending to fact-checker
            </p>
            <div className="bg-blue-50 rounded-lg p-3 border border-blue-200">
              <p className="text-xs text-blue-800 font-medium">
                üì§ Sending to: localhost:5000/api/extension
              </p>
            </div>
          </div>
        )}

        {/* Result State */}
        {result && (
          <div className="space-y-3">
            <div
              className={`rounded-lg p-6 shadow-lg ${
                result.verdict === 'true'
                  ? 'bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300'
                  : 'bg-gradient-to-br from-red-50 to-rose-50 border-2 border-red-300'
              }`}
            >
              <div className="flex items-center gap-3 mb-3">
                {result.verdict === 'true' ? (
                  <CheckCircle2 className="w-10 h-10 text-green-600" />
                ) : (
                  <XCircle className="w-10 h-10 text-red-600" />
                )}
                <div>
                  <h3
                    className={`text-xl font-bold ${
                      result.verdict === 'true'
                        ? 'text-green-800'
                        : 'text-red-800'
                    }`}
                  >
                    {result.verdict === 'true'
                      ? 'Verified True'
                      : 'False Information'}
                  </h3>
                  <p
                    className={`text-sm ${
                      result.verdict === 'true'
                        ? 'text-green-600'
                        : 'text-red-600'
                    }`}
                  >
                    Confidence: {(result.confidence * 100).toFixed(0)}%
                  </p>
                </div>
              </div>

              <div className="bg-white bg-opacity-70 rounded-lg p-4 mb-3">
                <p className="text-gray-800 font-medium text-sm">
                  {result.message}
                </p>
              </div>

              <div className="bg-white bg-opacity-50 rounded-lg p-3">
                <p className="text-xs text-gray-700">{result.summary}</p>
              </div>
            </div>

            {/* Demo Info */}
            <div className="bg-blue-50 rounded-lg p-3 border border-blue-200">
              <p className="text-xs text-blue-800 font-medium mb-1">
                üì• Response from: localhost:5000/api/agent
              </p>
              <p className="text-xs text-gray-600">
                Demo mode - Backend not connected yet
              </p>
            </div>

            {/* Download Button */}
            {scrapedData && (
              <button
                onClick={downloadMarkdown}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center gap-2"
              >
                <Download className="w-5 h-5" />
                Download Report (Markdown)
              </button>
            )}

            <button
              onClick={resetState}
              className="w-full bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-4 rounded-lg shadow-md hover:shadow-lg transition-all duration-200"
            >
              Check Another Page
            </button>
          </div>
        )}

        {/* Error State */}
        {error && (
          <div className="bg-red-50 border-2 border-red-300 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <XCircle className="w-5 h-5 text-red-600" />
              <h3 className="font-semibold text-red-800">Error</h3>
            </div>
            <p className="text-sm text-red-700">{error}</p>
            <button
              onClick={resetState}
              className="mt-3 w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200"
            >
              Try Again
            </button>
          </div>
        )}
      </div>

      {/* Footer */}
      <div className="px-4 pb-4">
        <p className="text-center text-xs text-gray-500">
          Powered by TruthGuard AI
        </p>
      </div>
    </div>
  );
};

export default Popup;
